/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
import { useEffect, useRef, useState } from 'react';
import { Modality } from '@google/genai';

import BasicFace from '../basic-face/BasicFace';
import { useLiveAPIContext } from '../../../contexts/LiveAPIContext';
import { createSystemInstructions } from '@/lib/prompts';
import { useAgent, useUser } from '@/lib/state';

export default function KeynoteCompanion() {
  const { client, connected, setConfig } = useLiveAPIContext();
  const faceCanvasRef = useRef<HTMLCanvasElement>(null);
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const user = useUser();
  const { current } = useAgent();

  // ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Live API
  useEffect(() => {
    setConfig({
      responseModalities: [Modality.AUDIO, Modality.TEXT],
      speechConfig: {
        voiceConfig: {
          prebuiltVoiceConfig: { voiceName: current.voice },
        },
      },
      systemInstruction: {
        parts: [
          {
            text: createSystemInstructions(current, user),
          },
        ],
      },
    });
  }, [setConfig, user, current]);

  // üñºÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
  const showImage = (url: string) => {
    setImageUrl(url);
  };

  // üí¨ –†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!client) return;

    const handleMessage = (event: any) => {
      const text = event?.data?.text?.toLowerCase?.() ?? '';

      // –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–∞
      const doctorQuestions = [
        '—è–∫–æ–≥–æ –ª—ñ–∫–∞—Ä—è —Ç–∏ –ø–æ—Ä–∞–¥–∏—à',
        '—è–∫–∏–π —Ö–æ—Ä–æ—à–∏–π –ª—ñ–∫–∞—Ä',
        '—è–∫–∏–π –Ω–∞–π–∫—Ä–∞—â–∏–π –ª—ñ–∫–∞—Ä',
        '–∫–æ–≥–æ —Ç–∏ –ø–æ—Ä–∞–¥–∏—à —è–∫ –ª—ñ–∫–∞—Ä—è',
        '—è–∫–∏–π –ª—ñ–∫–∞—Ä –Ω–∞–π–∫—Ä–∞—â–∏–π',
      ];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω—É –∏–∑ —Ñ—Ä–∞–∑
      const isDoctorQuestion = doctorQuestions.some((q) => text.includes(q));

      if (isDoctorQuestion) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        client.sendText('–ù–∞–π–∫—Ä–∞—â–∏–π –ª—ñ–∫–∞—Ä ‚Äî –∫–∞—Ä–¥—ñ–æ–ª–æ–≥ –Æ—Ä—ñ–π.');
        showImage(
          'https://i.ibb.co/GfdcvnnD/bench.jpg'
        );
      }
    };

    client.addEventListener('message', handleMessage);
    return () => client.removeEventListener('message', handleMessage);
  }, [client]);

  return (
    <>
      <div className="keynote-companion relative">
        <BasicFace canvasRef={faceCanvasRef!} color={current.bodyColor} />

        {/* ü©∫ –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
        {imageUrl && (
          <div className="absolute inset-0 bg-black/70 flex items-center justify-center z-50">
            <div className="bg-white rounded-2xl shadow-2xl p-4 max-w-lg">
              <img
                src={imageUrl}
                alt="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –ª—ñ–∫–∞—Ä"
                className="rounded-xl max-h-[80vh] object-contain"
              />
              <button
                className="mt-4 px-4 py-2 rounded-lg bg-red-500 text-white hover:bg-red-600 transition"
                onClick={() => setImageUrl(null)}
              >
                –ó–∞–∫—Ä–∏—Ç–∏
              </button>
            </div>
          </div>
        )}
      </div>

      <details className="info-overlay">
        <summary className="info-button">
          <span className="icon">info</span>
        </summary>
        <div className="info-text">
          <p>
            Experimental model from Google DeepMind. Adapted for the service.
            Speaks many languages. On iOS, disable AVR.
          </p>
        </div>
      </details>
    </>
  );
}
